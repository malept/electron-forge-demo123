name: Build

on:
  push:
    branches:
      - discord/windows-icons
      - master
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install
        run: yarn
      - name: lint
        run: yarn lint
  bundle:
    needs: lint
    runs-on: ${{ matrix.platform.host }}
    strategy:
      matrix:
        platform:
          - host: windows-latest
            target: win32
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        if: matrix.platform.host != 'macOS-latest'
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Set up macOS signing certificate
        run: ci/codesign/import-testing-cert-ci.sh
      - name: Install
        run: yarn
      - name: Bundle app
        shell: bash
        run: ci/make-bundle.sh
        env:
          PLATFORM: ${{ matrix.platform.target }}
      - name: Save bundled app
        uses: actions/upload-artifact@v1
        with:
          name: bundled-app-${{ matrix.platform.target }}
          path: out
  installers:
    needs: bundle
    runs-on: ${{ matrix.distributable.os }}-latest
    strategy:
      matrix:
        distributable:
          - os: Windows
            platform: win32
            maker: squirrel
    steps:
      - uses: actions/checkout@v2
      - name: Load bundled app
        uses: actions/download-artifact@v1
        with:
          name: bundled-app-${{ matrix.distributable.platform }}
          path: out
      - name: Setup Platform dependencies
        run: ci/platform_setup.sh
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        if: matrix.distributable.os != 'macOS'
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install
        run: yarn
      - name: Create distributables
        shell: bash
        run: ci/make-distributable.sh
        env:
          DEBUG: electron-installer-snap:snapcraft
          MAKER: ${{ matrix.distributable.maker }}
          PLATFORM: ${{ matrix.distributable.platform }}
      - name: Save distributable
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.distributable.maker }} (${{ matrix.distributable.platform }})
          path: out/make
